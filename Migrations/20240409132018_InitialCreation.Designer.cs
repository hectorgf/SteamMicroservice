// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamMicroservice.Model.Configuration;

#nullable disable

namespace SteamMicroservice.Migrations
{
    [DbContext(typeof(SteamDbContext))]
    [Migration("20240409132018_InitialCreation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OwnedGamePlayer", b =>
                {
                    b.Property<Guid>("OwnedGamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ownersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OwnedGamesId", "ownersId");

                    b.HasIndex("ownersId");

                    b.ToTable("OwnedGamePlayer");
                });

            modelBuilder.Entity("SteamCategorySteamGame", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("SteamCategorySteamGame");
                });

            modelBuilder.Entity("SteamDeveloperSteamGame", b =>
                {
                    b.Property<Guid>("DevelopersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DevelopersId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("SteamDeveloperSteamGame");
                });

            modelBuilder.Entity("SteamGameSteamGenre", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("SteamGameSteamGenre");
                });

            modelBuilder.Entity("SteamGameSteamPublisher", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublishersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "PublishersId");

                    b.HasIndex("PublishersId");

                    b.ToTable("SteamGameSteamPublisher");
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.OwnedGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("appid")
                        .HasColumnType("int");

                    b.Property<int>("playtime_2weeks")
                        .HasColumnType("int");

                    b.Property<int>("playtime_deck_forever")
                        .HasColumnType("int");

                    b.Property<int>("playtime_disconnected")
                        .HasColumnType("int");

                    b.Property<int>("playtime_forever")
                        .HasColumnType("int");

                    b.Property<int>("playtime_linux_forever")
                        .HasColumnType("int");

                    b.Property<int>("playtime_mac_forever")
                        .HasColumnType("int");

                    b.Property<int>("playtime_windows_forever")
                        .HasColumnType("int");

                    b.Property<int>("rtime_last_played")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OwnedGames", (string)null);
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.SteamCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SteamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.SteamDeveloper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Developers", (string)null);
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.SteamGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutGame")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CapsuleImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CapsuleImageV5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Linux")
                        .HasColumnType("bit");

                    b.Property<bool>("MacOS")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Recomendations")
                        .HasColumnType("bigint");

                    b.Property<int>("RequiredAge")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SteamId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Windows")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.SteamGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SteamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.SteamPublisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers", (string)null);
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.SteamRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Minimum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recomended")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Requirements", (string)null);
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.SteamScreenshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Full")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("SteamId")
                        .HasColumnType("bigint");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Screenshots", (string)null);
                });

            modelBuilder.Entity("SteamMicroservice.Model.Users.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("avatarfull")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("avatarhash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("avatarmedium")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("commentpermission")
                        .HasColumnType("int");

                    b.Property<int>("communityvisibilitystate")
                        .HasColumnType("int");

                    b.Property<int>("lastlogoff")
                        .HasColumnType("int");

                    b.Property<int>("loccityid")
                        .HasColumnType("int");

                    b.Property<string>("loccountrycode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("locstatecode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("personaname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("personastate")
                        .HasColumnType("int");

                    b.Property<int>("personastateflags")
                        .HasColumnType("int");

                    b.Property<string>("primaryclanid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("profilestate")
                        .HasColumnType("int");

                    b.Property<string>("profileurl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("realname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("steamid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("timecreated")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("OwnedGamePlayer", b =>
                {
                    b.HasOne("SteamMicroservice.Model.Games.OwnedGame", null)
                        .WithMany()
                        .HasForeignKey("OwnedGamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamMicroservice.Model.Users.Player", null)
                        .WithMany()
                        .HasForeignKey("ownersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamCategorySteamGame", b =>
                {
                    b.HasOne("SteamMicroservice.Model.Games.SteamCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamMicroservice.Model.Games.SteamGame", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamDeveloperSteamGame", b =>
                {
                    b.HasOne("SteamMicroservice.Model.Games.SteamDeveloper", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamMicroservice.Model.Games.SteamGame", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamGameSteamGenre", b =>
                {
                    b.HasOne("SteamMicroservice.Model.Games.SteamGame", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamMicroservice.Model.Games.SteamGenre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamGameSteamPublisher", b =>
                {
                    b.HasOne("SteamMicroservice.Model.Games.SteamGame", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamMicroservice.Model.Games.SteamPublisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.SteamGame", b =>
                {
                    b.OwnsOne("SteamMicroservice.Model.Games.SteamPrice", "Price", b1 =>
                        {
                            b1.Property<Guid>("SteamGameId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long?>("Discount")
                                .HasColumnType("bigint");

                            b1.Property<long?>("Final")
                                .HasColumnType("bigint");

                            b1.Property<long?>("Initial")
                                .HasColumnType("bigint");

                            b1.HasKey("SteamGameId");

                            b1.ToTable("Games");

                            b1.WithOwner()
                                .HasForeignKey("SteamGameId");
                        });

                    b.OwnsOne("SteamMicroservice.Model.Games.SteamReleaseDate", "ReleaseDate", b1 =>
                        {
                            b1.Property<Guid>("SteamGameId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("ComingSoon")
                                .HasColumnType("bit");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.HasKey("SteamGameId");

                            b1.ToTable("Games");

                            b1.WithOwner()
                                .HasForeignKey("SteamGameId");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("ReleaseDate")
                        .IsRequired();
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.SteamRequirement", b =>
                {
                    b.HasOne("SteamMicroservice.Model.Games.SteamGame", "Game")
                        .WithMany("Requirements")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.SteamScreenshot", b =>
                {
                    b.HasOne("SteamMicroservice.Model.Games.SteamGame", "Game")
                        .WithMany("Screenshots")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SteamMicroservice.Model.Games.SteamGame", b =>
                {
                    b.Navigation("Requirements");

                    b.Navigation("Screenshots");
                });
#pragma warning restore 612, 618
        }
    }
}
